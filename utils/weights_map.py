import numpy as np

available_weights = ['MNIST']
weights_stylegan2_dir = 'weights/'

mapping_weights = ['Mapping_network/Dense0/weight', 'Mapping_network/Dense0/bias',
                   'Mapping_network/Dense1/weight', 'Mapping_network/Dense1/bias',
                   'Mapping_network/Dense2/weight', 'Mapping_network/Dense2/bias',
                   'Mapping_network/Dense3/weight', 'Mapping_network/Dense3/bias',
                   'Mapping_network/Dense4/weight', 'Mapping_network/Dense4/bias',
                   'Mapping_network/Dense5/weight', 'Mapping_network/Dense5/bias',
                   'Mapping_network/Dense6/weight', 'Mapping_network/Dense6/bias',
                   'Mapping_network/Dense7/weight', 'Mapping_network/Dense7/bias',
                   'Mapping_network/Conditional_Dense/weight', 'Mapping_network/Conditional_Dense/bias']


def get_synthesis_name_weights(resolution):
    synthesis_weights = ['Synthesis_network/4x4/Const/const',
                         'Synthesis_network/4x4/Conv1/noise_strength',
                         'Synthesis_network/4x4/Conv1/bias',
                         'Synthesis_network/4x4/Conv1/mod_bias',
                         'Synthesis_network/4x4/Conv1/mod_weight',
                         'Synthesis_network/4x4/Conv1/weight',
                         'Synthesis_network/4x4/ToRGB/bias',
                         'Synthesis_network/4x4/ToRGB/mod_bias',
                         'Synthesis_network/4x4/ToRGB/mod_weight',
                         'Synthesis_network/4x4/ToRGB/weight']

    for res in range(3, int(np.log2(resolution)) + 1):
        name = 'Synthesis_network/{}x{}/'.format(2 ** res, 2 ** res)
        for up in ['Conv0_up/', 'Conv1/', 'ToRGB/']:
            for var in ['noise_strength', 'bias', 'mod_bias', 'mod_weight', 'weight']:
                if up == 'ToRGB/' and var == 'noise_strength':
                    continue
                synthesis_weights.append(name + up + var)

    return synthesis_weights


synthesis_weights_1024 = get_synthesis_name_weights(1024)
synthesis_weights_512 = get_synthesis_name_weights(512)
synthesis_weights_256 = get_synthesis_name_weights(256)
synthesis_weights_32 = get_synthesis_name_weights(32)

discriminator_weights_1024 = ['4x4/Conv/bias',
                              '1024x1024/FromRGB/bias',
                              '1024x1024/FromRGB/weight',
                              '1024x1024/Conv0/bias',
                              '1024x1024/Conv1_down/bias',
                              '1024x1024/Conv0/weight',
                              '1024x1024/Conv1_down/weight',
                              '1024x1024/Skip/weight',
                              '512x512/Conv0/bias',
                              '512x512/Conv1_down/bias',
                              '512x512/Conv0/weight',
                              '512x512/Conv1_down/weight',
                              '512x512/Skip/weight',
                              '256x256/Conv0/bias',
                              '256x256/Conv1_down/bias',
                              '256x256/Conv0/weight',
                              '256x256/Conv1_down/weight',
                              '256x256/Skip/weight',
                              '128x128/Conv0/bias',
                              '128x128/Conv1_down/bias',
                              '128x128/Conv0/weight',
                              '128x128/Conv1_down/weight',
                              '128x128/Skip/weight',
                              '64x64/Conv0/bias',
                              '64x64/Conv1_down/bias',
                              '64x64/Conv0/weight',
                              '64x64/Conv1_down/weight',
                              '64x64/Skip/weight',
                              '32x32/Conv0/bias',
                              '32x32/Conv1_down/bias',
                              '32x32/Conv0/weight',
                              '32x32/Conv1_down/weight',
                              '32x32/Skip/weight',
                              '16x16/Conv0/bias',
                              '16x16/Conv1_down/bias',
                              '16x16/Conv0/weight',
                              '16x16/Conv1_down/weight',
                              '16x16/Skip/weight',
                              '8x8/Conv0/bias',
                              '8x8/Conv1_down/bias',
                              '8x8/Conv0/weight',
                              '8x8/Conv1_down/weight',
                              '8x8/Skip/weight',
                              '4x4/Conv/weight',
                              '4x4/Dense0/weight',
                              '4x4/Dense0/bias',
                              'Output_c/weight',
                              'Output_c/bias',
                              'Output_uc/weight',
                              'Output_uc/bias']

discriminator_weights_512 = ['4x4/Conv/bias',
                             '512x512/FromRGB/bias',
                             '512x512/FromRGB/weight',
                             '512x512/Conv0/bias',
                             '512x512/Conv1_down/bias',
                             '512x512/Conv0/weight',
                             '512x512/Conv1_down/weight',
                             '512x512/Skip/weight',
                             '256x256/Conv0/bias',
                             '256x256/Conv1_down/bias',
                             '256x256/Conv0/weight',
                             '256x256/Conv1_down/weight',
                             '256x256/Skip/weight',
                             '128x128/Conv0/bias',
                             '128x128/Conv1_down/bias',
                             '128x128/Conv0/weight',
                             '128x128/Conv1_down/weight',
                             '128x128/Skip/weight',
                             '64x64/Conv0/bias',
                             '64x64/Conv1_down/bias',
                             '64x64/Conv0/weight',
                             '64x64/Conv1_down/weight',
                             '64x64/Skip/weight',
                             '32x32/Conv0/bias',
                             '32x32/Conv1_down/bias',
                             '32x32/Conv0/weight',
                             '32x32/Conv1_down/weight',
                             '32x32/Skip/weight',
                             '16x16/Conv0/bias',
                             '16x16/Conv1_down/bias',
                             '16x16/Conv0/weight',
                             '16x16/Conv1_down/weight',
                             '16x16/Skip/weight',
                             '8x8/Conv0/bias',
                             '8x8/Conv1_down/bias',
                             '8x8/Conv0/weight',
                             '8x8/Conv1_down/weight',
                             '8x8/Skip/weight',
                             '4x4/Conv/weight',
                             '4x4/Dense0/weight',
                             '4x4/Dense0/bias',
                             'Output_c/weight',
                             'Output_c/bias',
                             'Output_uc/weight',
                             'Output_uc/bias']

discriminator_weights_256 = ['4x4/Conv/bias',
                             '256x256/FromRGB/bias',
                             '256x256/FromRGB/weight',
                             '256x256/Conv0/bias',
                             '256x256/Conv1_down/bias',
                             '256x256/Conv0/weight',
                             '256x256/Conv1_down/weight',
                             '256x256/Skip/weight',
                             '128x128/Conv0/bias',
                             '128x128/Conv1_down/bias',
                             '128x128/Conv0/weight',
                             '128x128/Conv1_down/weight',
                             '128x128/Skip/weight',
                             '64x64/Conv0/bias',
                             '64x64/Conv1_down/bias',
                             '64x64/Conv0/weight',
                             '64x64/Conv1_down/weight',
                             '64x64/Skip/weight',
                             '32x32/Conv0/bias',
                             '32x32/Conv1_down/bias',
                             '32x32/Conv0/weight',
                             '32x32/Conv1_down/weight',
                             '32x32/Skip/weight',
                             '16x16/Conv0/bias',
                             '16x16/Conv1_down/bias',
                             '16x16/Conv0/weight',
                             '16x16/Conv1_down/weight',
                             '16x16/Skip/weight',
                             '8x8/Conv0/bias',
                             '8x8/Conv1_down/bias',
                             '8x8/Conv0/weight',
                             '8x8/Conv1_down/weight',
                             '8x8/Skip/weight',
                             '4x4/Conv/weight',
                             '4x4/Dense0/weight',
                             '4x4/Dense0/bias',
                             'Output_c/weight',
                             'Output_c/bias',
                             'Output_uc/weight',
                             'Output_uc/bias']

discriminator_weights_32 = ['4x4/Conv/bias',
                            '32x32/FromRGB/bias',
                            '32x32/FromRGB/weight',
                            '32x32/Conv0/bias',
                            '32x32/Conv1_down/bias',
                            '32x32/Conv0/weight',
                            '32x32/Conv1_down/weight',
                            '32x32/Skip/weight',
                            '16x16/Conv0/bias',
                            '16x16/Conv1_down/bias',
                            '16x16/Conv0/weight',
                            '16x16/Conv1_down/weight',
                            '16x16/Skip/weight',
                            '8x8/Conv0/bias',
                            '8x8/Conv1_down/bias',
                            '8x8/Conv0/weight',
                            '8x8/Conv1_down/weight',
                            '8x8/Skip/weight',
                            '4x4/Conv/weight',
                            '4x4/Dense0/weight',
                            '4x4/Dense0/bias',
                            'Output_c/weight',
                            'Output_c/bias',
                            'Output_uc/weight',
                            'Output_uc/bias']

synthesis_weights = {'MNIST': synthesis_weights_32,
                     32: synthesis_weights_32,
                     256: synthesis_weights_256}

discriminator_weights = {'MNIST': discriminator_weights_32,
                         32: discriminator_weights_32,
                         32: discriminator_weights_256}
